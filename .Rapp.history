names(sort(table(playedIml[,2][, drop = TRUE])))
names(sort(table(playedIml[,2])))
names(sort(table(playedIml[,2][, drop = TRUE]), decreasing = T))
names(sort(table(playedIml[,2]), decreasing = T))
targetGenreName = names(sort(table(iml[,2]), decreasing = T))[i]
targetGenreName = names(sort(table(iml[,2]), decreasing = T))
targetGenreName
graphData  = c()#
 for(weekNum in 1 : 7){#
	 for(i in 1:length(table(playedIml[,2][, drop = TRUE]))){#
		targetGenreName = names(sort(table(playedIml[,2]), decreasing = T))[i]#
		imlWeekGenre = playedIml[  as.POSIXlt(playedIml[,1])$wday==weekNum-1 & playedIml$genre == targetGenreName,]#
	    imlWeekGenreTime = imlWeekGenre[,1]#
	    wdayName = switch(weekNum, "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" )#
	    histData = hist(as.POSIXlt(imlWeekGenreTime)$hour+as.POSIXlt(imlWeekGenreTime)$min/60+as.POSIXlt(imlWeekGenreTime)$sec/60/60, main=paste(wdayName, "_", targetGenreName, sep = "")  , breaks=seq(0,24,1), col = hsv(1*i/length(table(playedIml[,2])), 1, 1, alpha = 0.5), xlab = "Time", ylab = "Frequency", xlim = c(0,23), ylim = c(0, histMax)) #
    	graphData = rbind(graphData, histData$counts)#
    	quartz.save(paste("~/dropbox/thesis/out_png/", wdayName, "_", i, targetGenreName, ".png", sep=""))	#
	}#
}
ml$playCount==1 & playedIml$genre == "Jazz",]#
 graphData  = c()#
 for(weekNum in 1 : 7){#
	 for(i in 1:length(table(playedIml[,2][, drop = TRUE]))){#
		targetGenreName = names(sort(table(playedIml[,2]), decreasing = T))[i]#
		imlWeekGenre = playedIml[  as.POSIXlt(playedIml[,1])$wday==weekNum-1 & playedIml$genre == targetGenreName,]#
	    imlWeekGenreTime = imlWeekGenre[,1]#
	    wdayName = switch(weekNum, "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" )#
	    histData = hist(as.POSIXlt(imlWeekGenreTime)$hour+as.POSIXlt(imlWeekGenreTime)$min/60+as.POSIXlt(imlWeekGenreTime)$sec/60/60, main=paste(wdayName, "_", targetGenreName, sep = "")  , breaks=seq(0,24,1), col = hsv(1*i/length(table(playedIml[,2])), 1, 1, alpha = 0.5), xlab = "Time", ylab = "Frequency", xlim = c(0,23), ylim = c(0, histMax)) #
    	graphData = rbind(graphData, histData$counts)#
    	quartz.save(paste("~/dropbox/thesis/out_png/", wdayName, "_", i, "_", targetGenreName, ".png", sep=""))	#
	}#
}
graphData  = c()#
 for(weekNum in 1 : 7){#
	 for(i in 1:length(table(playedIml[,2][, drop = TRUE]))){#
		targetGenreName = names(sort(table(playedIml[,2]), decreasing = T))[i]#
		imlWeekGenre = playedIml[  as.POSIXlt(playedIml[,1])$wday==weekNum-1 & playedIml$genre == targetGenreName,]#
	    imlWeekGenreTime = imlWeekGenre[,1]#
	    wdayName = switch(weekNum, "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" )#
	    histData = hist(as.POSIXlt(imlWeekGenreTime)$hour+as.POSIXlt(imlWeekGenreTime)$min/60+as.POSIXlt(imlWeekGenreTime)$sec/60/60, main=paste(wdayName, "_", targetGenreName, sep = "")  , breaks=seq(0,24,1), col = hsv(1*i/length(table(playedIml[,2])), 1, 1, alpha = 0.5), xlab = "Time", ylab = "Frequency", xlim = c(0,23), ylim = c(0, histMax)) #
    	graphData = rbind(graphData, histData$counts)#
    	quartz.save(paste("~/dropbox/thesis/out_png/", wdayName, "_", i,"_", targetGenreName, ".png", sep=""))	#
	}#
}
graphData  = c()#
 for(weekNum in 1 : 7){#
	 for(i in 1:length(table(playedIml[,2][, drop = TRUE]))){#
		targetGenreName = names(sort(table(playedIml[,2]), decreasing = T))[i]#
		imlWeekGenre = playedIml[  as.POSIXlt(playedIml[,1])$wday==weekNum-1 & playedIml$genre == targetGenreName,]#
	    imlWeekGenreTime = imlWeekGenre[,1]#
	    wdayName = switch(weekNum, "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" )#
	    histData = hist(as.POSIXlt(imlWeekGenreTime)$hour+as.POSIXlt(imlWeekGenreTime)$min/60+as.POSIXlt(imlWeekGenreTime)$sec/60/60, main=paste(wdayName, "_", targetGenreName, sep = "")  , breaks=seq(0,24,1), col = hsv(1*i/length(table(playedIml[,2])), 1, 1, alpha = 0.5), xlab = "Time", ylab = "Frequency", xlim = c(0,23), ylim = c(0, histMax)) #
    	graphData = rbind(graphData, histData$counts)#
    	quartz.save(paste("~/dropbox/thesis/out_png/", weekNum, wdayName, "_", i,"_", targetGenreName, ".png", sep=""))	#
	}#
}
graphData  = c()#
 for(weekNum in 1 : 7){#
	 for(i in 1:length(table(playedIml[,2][, drop = TRUE]))){#
		targetGenreName = names(sort(table(playedIml[,2]), decreasing = T))[i]#
		imlWeekGenre = playedIml[  as.POSIXlt(playedIml[,1])$wday==weekNum-1 & playedIml$genre == targetGenreName,]#
	    imlWeekGenreTime = imlWeekGenre[,1]#
	    wdayName = switch(weekNum, "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" )#
	    histData = hist(as.POSIXlt(imlWeekGenreTime)$hour+as.POSIXlt(imlWeekGenreTime)$min/60+as.POSIXlt(imlWeekGenreTime)$sec/60/60, main=paste(wdayName, "_", targetGenreName, sep = "")  , breaks=seq(0,24,1), col = hsv(1*i/length(table(playedIml[,2])), 1, 1, alpha = 0.5), xlab = "Time", ylab = "Frequency", xlim = c(0,23), ylim = c(0, histMax)) #
    	graphData = rbind(graphData, histData$counts)#
    	quartz.save(paste("~/dropbox/thesis/out_png/", weekNum, "_", wdayName, "_", i,"_", targetGenreName, ".png", sep=""))	#
	}#
}
length(table(playedIml[,2]))
length(table(playedIml[,2][, dropbox = true]))
length(table(playedIml[,2][, dropbox = TRUE]))
length(table(playedIml[,2][,drop = TRUE]))
length(table(playedIml[,2][, drop = TRUE]))
source("imlAnalyzer.R")
source("imlanalyzer.r")
playedIml
playedIml[,]
playedIml[]
playedIml[c(true, true, false)]
playedIml[c(true, true, false),]
iml[,4]!=0
playedIml[c(TRUE, TRUE, FALSE),]
playedIml[c(TRUE, TRUE, FALSE)]
playedIml[c(TRUE, TRUE, FALSE),]
playedIml[c(TRUE, FALSE),]
playedIml[]
iml
source("imlanalyzer.r")
foo
foobar
foobar = c{2,3,5}
foobar = c(2,3,5)
foobar
foobar=c()
foobar
source("imlanalyzer.r")
iml[2036,][1]-round(iml[2036,][3]/1000)
dim(iml)
iml[2036,][1]
iml[2036,]
iml[sort.list(iml$Played Date),]
iml[sort.list(iml$PlayedDate),]
iml[sort.list(iml$playedDate),]
names(iml)
iml[sort.list(iml$playDate),]
iml[2036,][1]-round(iml[2036,][3]/1000)
iml[2036,][1]
round(iml[2036,][3]/1000)
iml[2036,]
iml[1:2036,]
iml[1:2036,][1]-round(iml[1:2036,][3]/1000)
iml[1:2036,]
iml
iml[1:2036,][1]-round(iml[1:2036,][3]/1000)
selectedItems
source("imlanalyzer.r")
foo = c{1,2,3}
foo = c(1,2,3)
foo[1]
foo[3]
foo[4]
foo[2]
source("imlanalyzer.r")
iml
iml[iml[,4]==false]
iml[iml[,4]=="false"]
iml[,4]
iml[,3]
iml[,1]
iml[,5]
iml[,5]==false
iml[,5]=="false"
iml[,5]==false
iml[,5]=="false"
iml[iml[,5]=="false"]
iml[iml[,5]=="false",]
iml
iml[iml[,5]=="false",]
iml[iml[,5]=="true",]
checkedIml = iml[iml[,5]=="false",]
checkedIMl
checkediml
checkedIml
checkedIml[,3]
checkedIml[,4]
iml[1,]
checkedIml[,2]
checkedIml[,2][drop = true]
checkedIml[,2][, drop = TRUE]
checkedIml[,2]
hist(checkedIml[,2])
table(checkedIml[,2])
table(checkedIml[,2][, drop = TRUE])
checkedIml[,2][, drop = TRUE]
checkedIml[,2]
table(checkedIml[,2][, drop = TRUE])
table(checkedIml[,2])
names(sort(table(playedIml[,2][, drop = TRUE]), decreasing = T))
names(sort(table(playedIml[,2], decreasing = T))
)
names(sort(table(playedIml[,2]), decreasing = T))
names(sort(table(playedIml[,2], decreasing = T))
)
table(checkedIml[,2])
table(sort(checkedIml[,2], decreasing = T)
)
table(sort(checkedIml[,2], decreasing = T))
sort(table(checkedIml[,2], decreasing = T))
sort(table(checkedIml[,2]), decreasing = T)
write.csv(sort(table(checkedIml[,2]), decreasing = T), "checkedImlGenreTable.csv")
source("imlanalyzer.r")
source("checkedImlAnalyzer.r")
DIctionaly#
#ジャンルの数---length(table(iml[,2]))#
#
iml = read.table('iml.txt', header = F, sep = ",", quote = "")#
#convert string to POSIXlt#
time = strptime(iml[,1],"%Y-%m-%d %H:%M:%S")#
#make data frame which consists of POXIlt and string about genre#
iml = data.frame(time, iml[,2], iml[,3], iml[,4], iml[,5], iml[6])#
#convert UTC to JST#
iml[,1] = iml[,1]+9*60*60#
#total time#
names(iml)[1] = "playDate"#
names(iml)[2] = "genre"#
names(iml)[3] = "totalTime"#
names(iml)[4] = "playCount"#
names(iml)[5] = "disabled"#
names(iml)[6] = "trackName"
iml
dim(iml)
dim(iml)[1]
c()
c(1,2,)
c(1,2,3)
foo
foo = c(1,2,3)
bar = c(10, 20, 30)
rbind(foo, bar)
cbind(foo, bar)
cbind(foo, bar)[1,]
iml[1,]
iml[2,]
iml[2,1]
strptime(iml[2,1],"%Y-%m-%d %H:%M:%S")
strptime("2012-11-02","%Y-%m-%d %H:%M:%S")
strptime("2012-11-02 00:33:00","%Y-%m-%d %H:%M:%S")
DIctionaly#
#ジャンルの数---length(table(iml[,2]))#
#
iml = read.table('iml.txt', header = F, sep = ",", quote = "")#
#convert string to POSIXlt#
time = strptime(iml[,1],"%Y-%m-%d %H:%M:%S")#
#make data frame which consists of POXIlt and string about genre#
iml = data.frame(time, iml[,2], iml[,3], iml[,4], iml[,5], iml[6])#
#convert UTC to JST(UTCを日本時間に変換)#
iml[,1] = iml[,1]+9*60*60#
#total time#
names(iml)[1] = "playDate"#
names(iml)[2] = "genre"#
names(iml)[3] = "totalTime"#
names(iml)[4] = "playCount"#
names(iml)[5] = "disabled"#
names(iml)[6] = "trackName"
iml[2,]
strptime("2012-11-02 00:33:00","%Y-%m-%d %H:%M:%S")
strptime("2012-4-00 00:00:00","%Y-%m-%d %H:%M:%S")
strptime("2012-4-00 0:00:00","%Y-%m-%d %H:%M:%S")
strptime("2012-4-00 0:0:00","%Y-%m-%d %H:%M:%S")
strptime("2012-4-00 0:0:0","%Y-%m-%d %H:%M:%S")
strptime("2012-4-0 0:0:0","%Y-%m-%d %H:%M:%S")
strptime("2012-11-02 00:33:00","%Y-%m-%d %H:%M:%S")
strptime("2012-11-02 00:00:00","%Y-%m-%d %H:%M:%S")
strptime("2012-11-01 00:00:00","%Y-%m-%d %H:%M:%S")
strptime("2012-4-01 00:00:00","%Y-%m-%d %H:%M:%S")
strptime("2012-4-01 00:00:01","%Y-%m-%d %H:%M:%S")
strptime("2012-4-01 00:10:00","%Y-%m-%d %H:%M:%S")
strptime("2012-4-01 00:00:00","%Y-%m-%d %H:%M:%S")
strptime("2012-4-01 00:00:00","%Y-%m-%d %H:%M:%S") < strptime("2012-4-01 00:00:01","%Y-%m-%d %H:%M:%S")
strptime("2012-4-01 00:00:00","%Y-%m-%d %H:%M:%S") < strptime("2012-3-01 00:00:01","%Y-%m-%d %H:%M:%S")
iml[1, ]
iml[2, ]
iml[2, 1]
iml[3, 1]
iml
startTime = strptime("2012-4-01 00:00:00","%Y-%m-%d %H:%M:%S")#
for(i in 1 : dim(iml)[1]){#
	if(startTime < iml[i, 1]){#
		timeFilteredIml = rbind(timeFilteredIml, iml[i, ])#
	}#
}
iml[1,1] < strptime("2012-3-01 00:00:01","%Y-%m-%d %H:%M:%S")
iml[1,1]
iml[1,1] == NULL
iml[1,1] == NA
iml[1,1] == "NA"
iml[1,1] == NA
NA
foo
foobar
NA
NA == NA
isNA(NA)
is.na(NA)
is.na(foo)
isnot.na(foo)
timeFilteredIml = c()#
#ここでimlを2012年4月以降のものだけにする。#
startTime = strptime("2012-4-01 00:00:00","%Y-%m-%d %H:%M:%S")#
for(i in 1 : dim(iml)[1]){#
	if(is.na(iml[i, 1]) == false && startTime < iml[i, 1]){#
		timeFilteredIml = rbind(timeFilteredIml, iml[i, ])#
	}#
}
timeFilteredIml = c()#
#ここでimlを2012年4月以降のものだけにする。#
startTime = strptime("2012-4-01 00:00:00","%Y-%m-%d %H:%M:%S")#
for(i in 1 : dim(iml)[1]){#
	if(is.na(iml[i, 1]) == FALSE && startTime < iml[i, 1]){#
		timeFilteredIml = rbind(timeFilteredIml, iml[i, ])#
	}#
}
timeFilteredIml
timeFilteredIml[sort.list(timeFilteredIml$playDate),]
dim(iml)
dim(timeFilteredIml)
iml[sort.list(iml$playDate),]
iml
iml[sort.list(iml$playDate),]
timeFilteredIml = c()#
#ここでimlを2012年4月以降のものだけにする。#
startTime = strptime("2012-4-01 00:00:00","%Y-%m-%d %H:%M:%S")#
for(i in 1 : dim(iml)[1]){#
	if(is.na(iml[i, 1]) == FALSE && startTime < iml[i, 1]){#
		timeFilteredIml = rbind(timeFilteredIml, iml[i, ])#
	}#
}
dim(timeFilteredIml)
dim(c(1))
foo
dim(foo)
matrix(1:6, nrow=2, ncol=3)
dim(matrix(1:6, nrow=2, ncol=3)   )
dim(matrix(1, nrow=1, ncol=1)   )
dim(matrix(1, nrow=1, ncol=0)   )
dim(matrix(1, nrow=1, ncol=1)   )
source("imlAnalyzer_timeFiltered.R")
sortedIml
dim(sortedIml)
dim(iml)
iml[sort.list(iml$playDate),]
iml[sort.list(iml$playDate),][1,1]
sortedIml[1]
sortedIml[1][1]
sortedIml[1,1]
sortedIml[dim(sortedIml)[1],1]
sortedIml[dim(sortedIml)[1],1].asString
sortedIml[dim(sortedIml)[1],1].as.string
sortedIml[dim(sortedIml)[1],1].as.str
sortedIml[dim(sortedIml)[1],1].as.charactor
sortedIml[dim(sortedIml)[1],1].as.character
as.string(sortedIml[dim(sortedIml)[1],1])
as.character(sortedIml[dim(sortedIml)[1],1])
write.csv(c("foo", "bar"), "timeStamp_oldest_newest.csv")
write.csv(c(as.character(sortedIml[1,1]#
, as.character(sortedIml[dim(sortedIml)[1],1])#
), "timeStamp_oldest_newest.csv")
)
write.csv(c(as.character(sortedIml[1,1]), as.character(sortedIml[dim(sortedIml)[1],1])), "timeStamp_oldest_newest.csv")
source("imlAnalyzer_timeFiltered.R")
source("imlAnalyzer_timeFiltered.R")
source("imlAnalyzer_timeFiltered.R")
